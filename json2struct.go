package main

/**
 * Created by John Tsantilis
 * (i [dot] tsantilis [at] yahoo [dot] com A.K.A lumi) on 11/9/2017.
 */

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
	_"strings"
	"os/user"
	"bytes"
	_"strconv"
	"io/ioutil"
	"github.com/giannis20012001/GoTest/util"
	b64 "encoding/base64"

	"strings"
	"strconv"
)

type Response struct {
	Code         string `json:"code"`
	Message      string `json:"message"`
	ReturnObject []ReturnObject `json:"returnobject"`
}

type ReturnObject struct {
	GroundInfo []GroundInfo`json:"groundInfo"`
	ComponentInfo []ComponentInfo `json:"componentInfo"`
}

type GroundInfo struct {
	PublicIP         string `json:"publicIP"`
	PrivateIP        string `json:"privateIP"`
	AgentPort        string `json:"agentPort"`
	OrchestratorIP   string `json:"orchestratorIP"`
	OrchestratorPort string `json:"orchestratorPort"`
	GNID             string `json:"GNID"`
	GSGID            string `json:"GSGID"`
	CNID             string `json:"CNID"`
	NID              string `json:"NID"`
}

type ComponentInfo struct {
	ClassName string `json:"className"`
	CNID	string `json:"CNID"`
	NativeComponent bool   `json:"nativeComponent"`
	DependencyResolutionHandlers []DependencyResolutionHandlers `json:"dependencyResolutionHandlers"`
	DependencyBindingHandlers []DependencyBindingHandlers `json:"dependencyBindingHandlers"`
	Metrics []Metrics `json:"metrics"`
	ConfigurationParameters []ConfigurationParameters `json:"configurationParameters"`
	BehavioralProfile []BehavioralProfile`json:"behavioralProfile"`
	ExecutionRequirements []ExecutionRequirements `json:"executionRequirements"`
	ContainerParameters []ContainerParameters `json:"containerParameters"`
}

type DependencyResolutionHandlers struct {
	BindedRootComponent string `json:"bindedRootComponent"`
}

type DependencyBindingHandlers struct {}

type Metrics struct {
	Connections   string `json:"Connections"`
	BytesReceived string `json:"Bytes_received"`
	BytesSent     string `json:"Bytes_sent"`
}

type ConfigurationParameters struct {
	DbUser     string `json:"db_user"`
	DbPort     string `json:"db_port"`
	DbHost     string `json:"db_host"`
	DbPassword string `json:"db_password"`
}

type BehavioralProfile struct {
	Scalability string `json:"scalability"`
	Profile     string `json:"profile"`
}

type ExecutionRequirements struct {
	Memory  string `json:"memory"`
	Vcpu    string `json:"vcpu"`
	Storage string `json:"storage"`
}

type ContainerParameters struct {
	DockerEnvironment string `json:"DockerEnvironment"`
	DockerExpose      string `json:"DockerExpose"`
	DockerImage       string `json:"DockerImage"`
}

func main() {
	url := "http://arcadia-sc.euprojects.net/api/v1/node/17/config"
	fmt.Println("URL:>", url)

	usr, err := user.Current()
	if err != nil {
		fmt.Println(err)

	}

	nid := "92562d0d-6589"
	arrNid := []byte(nid)
	publicKey := util.GetPublicKeyPem(usr.HomeDir + "/Dropbox/ubitech/input_arcadia/agent_golang/authorized_keys")
	uEnc, err := util.RsaEncrypt(publicKey, arrNid)
	if err != nil {
		fmt.Println(err)

	}

	authorizationKey := b64.StdEncoding.EncodeToString(uEnc)

	var jsonStr = []byte("parameters")
	req, err := http.NewRequest("GET", url, bytes.NewBuffer(jsonStr))
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Authorization", authorizationKey)

	client := &http.Client{
		Timeout: time.Second * 10,

	}

	resp, err := client.Do(req)
	if err != nil {
		panic(err)

	}

	defer resp.Body.Close()

	body, _ := ioutil.ReadAll(resp.Body)
	fmt.Println("response Status:", resp.Status)
	fmt.Println("response Headers:", resp.Header)
	fmt.Println("response Body:", string(body))
	fmt.Println()

	/*a := new(AutoGenerated)
	err = json.Unmarshal(body, &a)
	if err != nil {
		fmt.Println(err)

	}

	fmt.Println(a)*/

	//Get reply and extract json response from body
	var data map[string]interface{}
	if err = json.Unmarshal(body, &data); err != nil {
		fmt.Println(err)

	}

	fmt.Println()
	value := data["returnobject"].(string)
	replacer := strings.NewReplacer("\\", "", "\"{", "{", "}\"", "}")
	result := replacer.Replace(value)
	fmt.Println(result)

	fmt.Println()
	var final map[string]interface{}
	json.Unmarshal([]byte(result), &final)
	fmt.Printf("%v\n", final["groundInfo"].(map[string]interface{})["publicIP"].(string))
	//fmt.Printf("%v", y["componentInfo"].(map[string]interface{})["dependencyResolutionHandlers"].(map[string]interface{})["aea5f833-008e-410d-9b0d-d06f4ffad83a"])

	//
	fmt.Println()
	alpha := new(GroundInfo)
	alpha.OrchestratorIP = final["groundInfo"].(map[string]interface{})["publicIP"].(string)
	alpha.PrivateIP = final["groundInfo"].(map[string]interface{})["privateIP"].(string)
	alpha.AgentPort = final["groundInfo"].(map[string]interface{})["agentPort"].(string)
	alpha.OrchestratorIP = final["groundInfo"].(map[string]interface{})["orchestratorIP"].(string)
	alpha.OrchestratorPort = final["groundInfo"].(map[string]interface{})["orchestratorPort"].(string)
	alpha.GNID = final["groundInfo"].(map[string]interface{})["GNID"].(string)
	alpha.GSGID = final["groundInfo"].(map[string]interface{})["GSGID"].(string)
	alpha.CNID = final["groundInfo"].(map[string]interface{})["CNID"].(string)
	alpha.NID = final["groundInfo"].(map[string]interface{})["NID"].(string)
	fmt.Println(alpha)

	fmt.Println()
	beta := new(ComponentInfo)
	beta.ClassName = final["componentInfo"].(map[string]interface{})["className"].(string)
	beta.CNID = final["componentInfo"].(map[string]interface{})["CNID"].(string)
	beta.NativeComponent, _ = strconv.ParseBool(final["nativeComponent"].(map[string]interface{})["publicIP"].(string))
	//beta.DependencyResolutionHandlers[0]
	//beta.DependencyBindingHandlers[0]
	beta.Metrics[0].BytesReceived = final["componentInfo"].(map[string]interface{})["metrics"].(map[string]interface{})["Bytes_received"].(string)
	beta.Metrics[0].BytesSent = final["componentInfo"].(map[string]interface{})["metrics"].(map[string]interface{})["Bytes_sent"].(string)
	beta.Metrics[0].Connections = final["componentInfo"].(map[string]interface{})["metrics"].(map[string]interface{})["Connections"].(string)

	beta.ConfigurationParameters[0].DbHost = final["componentInfo"].(map[string]interface{})["configurationParameters"].(map[string]interface{})[""].(string)
	beta.ConfigurationParameters[0].DbPassword = final["componentInfo"].(map[string]interface{})["configurationParameters"].(map[string]interface{})[""].(string)
	beta.ConfigurationParameters[0].DbPort = final["componentInfo"].(map[string]interface{})["configurationParameters"].(map[string]interface{})[""].(string)
	beta.ConfigurationParameters[0].DbUser = final["componentInfo"].(map[string]interface{})["configurationParameters"].(map[string]interface{})[""].(string)

	beta.BehavioralProfile[0].Profile =  final["componentInfo"].(map[string]interface{})["behavioralProfile"].(map[string]interface{})[""].(string)
	beta.BehavioralProfile[0].Scalability =  final["componentInfo"].(map[string]interface{})["behavioralProfile"].(map[string]interface{})["scalability"].(string)

	beta.ExecutionRequirements[0].Memory = final["componentInfo"].(map[string]interface{})["executionRequirements"].(map[string]interface{})["memory"].(string)
	beta.ExecutionRequirements[0].Storage = final["componentInfo"].(map[string]interface{})["executionRequirements"].(map[string]interface{})["vcpu"].(string)
	beta.ExecutionRequirements[0].Vcpu = final["componentInfo"].(map[string]interface{})["executionRequirements"].(map[string]interface{})["storage"].(string)

	beta.ContainerParameters[0].DockerEnvironment = final["componentInfo"].(map[string]interface{})["containerParameters"].(map[string]interface{})["DockerEnvironment"].(string)
	beta.ContainerParameters[0].DockerExpose = final["componentInfo"].(map[string]interface{})["containerParameters"].(map[string]interface{})["DockerExpose"].(string)
	beta.ContainerParameters[0].DockerImage = final["componentInfo"].(map[string]interface{})["containerParameters"].(map[string]interface{})["DockerImage"].(string)

}

func (c *ComponentInfo) GetMetrics() ([]Metrics) {
	return c.Metrics

}

func (c *ComponentInfo) AddMetric(metric string) {
	c.Metrics[0].BytesReceived = metric

}